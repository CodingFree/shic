#!/bin/bash

# Defaults
SHIC_HOST="irc.freenode.net"
SHIC_PORT=6667
SHIC_NICK="$USER"
SHIC_PASS=""
SHIC_COLORS=(
    "\e[0;31m::^ERROR"
    "\e[0;32m::(^<[^@]*@[^#])"
    "\e[1;33m::^<"
    "\e[1;33m::^->"
)

# Don't exit at Ctrl-C
trap "" SIGINT

# Clean up children at exit
trap "kill 0" EXIT

# Print error message and exit
function _fatal() {
    echo "Fatal: $*" >&2
    exit 1
}


# Handle message from server
# This runs as a separate process, which means that no variables are shared with 
# the input process. For better or for worse. Mostly for worse.
function _recv() {
    while read _line
    do
        # Remove source if present
        _source=""
        [[ ${_line:0:1} == ":" ]] && _source="${_line%% *}" && _line="${_line#* }"
        _source="${_source:1}"
        _user=${_source%%\!*}
        _txt="${_line#*:}"

        case "${_line%% *}" in
            "PING")
                _send "PONG" 
                ;;
            "PRIVMSG")
                _ch="${_line%% :*}"
                _ch="${_ch#* }"
                _output "<$_user@$_ch> $_txt"
                ;;
            *)
                _output "$_source >< $_line"
                ;;
        esac
    done
}

# Send raw message to server
function _send() {
    echo -e "$*\r\n" >&3
}

# Handle user input
function _input() {
    local line="$*"
    if [[ "${line:0:1}" != ":" ]]; then
        if [[ -z $channel ]]; then
            _output "ERROR: No channel to send to"
            return 1
        fi

        _send "PRIVMSG $channel :$line"
        _output "-> $channel> $line"
        return 0
    fi

    if [[ ${line:2:1} == " " ]]; then
        _txt="${line:3}"
        case ${line:1:1} in
            m ) read -r _to _msg <<< "$_txt" && _send "PRIVMSG $_to :$_msg"; return;;
            l ) _send "PART :$_txt"; return;;
            j ) _send "JOIN $_txt"; [[ -z $channel ]] && channel=$_txt; return;;
            s ) channel="$_txt";  return;;
        esac
    fi

    # Not recognized command, send to server
    _send "${line:1}"
}

# Print for user
function _output() {
    line="$*"

    # Apply coloring rules
    _color=""
    for rule in ${SHIC_COLORS[@]}; do
        [[ "$line" =~ ${rule#*::} ]] && _color="${rule%%::*}$_color"
    done

    echo -e "$_color$line\e[0m"
}


# Parse command line
while getopts "h:p:n:k:c:v" flag
do
    case $flag in
        v) echo "shic v. 0.1, (c) 2010 Henrik Hallberg"; exit;;
        h) SHIC_HOST="$OPTARG";;
        p) SHIC_PORT="$OPTARG";;
        n) SHIC_NICK="$OPTARG";;
        k) SHIC_PASS="$OPTARG";;
        c) source "$OPTARG";;
        ?) _fatal "Unknown option. Usage: $0 [-h hostname] [-p port] [-n nick] [-k password] [-c configfile] [-v]";;
    esac
done

# Open connection to server
exec 3<>/dev/tcp/$SHIC_HOST/$SHIC_PORT || _fatal "Could not connect to $SHIC_HOST:$SHIC_PORT"

# Read messages from server
_recv <&3 &

# Do what the protocol requires
[[ $SHIC_PASS ]] && _send "PASS $SHIC_PASS"
_send "NICK $SHIC_NICK"
_send "USER $SHIC_NICK localhost $SHIC_HOST :$SHIC_NICK"

while read line
do
    _input "$line"
done
